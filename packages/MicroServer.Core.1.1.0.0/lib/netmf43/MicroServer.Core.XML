<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MicroServer.Core</name>
    </assembly>
    <members>
        <member name="T:MicroServer.Extensions.ArrayExtensions">
            <summary>
            Extension methods for Array
            </summary>
        </member>
        <member name="M:MicroServer.Extensions.ArrayExtensions.Join(System.Array,System.String)">
            <summary>
            Adds a range of elements from the Array
            </summary>
            <param name="list">List to operate on</param>
            <param name="separator">Separator used to split the values</param>
        </member>
        <member name="T:MicroServer.Extensions.CharExtensions">
            <summary>
            Extension methods for Char
            </summary>
        </member>
        <member name="M:MicroServer.Extensions.CharExtensions.IsWhiteSpace(System.Char)">
            <summary>
            Check if the provided char is white space
            </summary>
            <param name="source">Char to validate</param>
            <returns>True if the Char is white space</returns>
        </member>
        <member name="M:MicroServer.Extensions.CharExtensions.IsDigit(System.Char)">
            <summary>
            Check if the provided char is white space
            </summary>
            <param name="source">Char to validate</param>
            <returns>True if the Char is white space</returns>
        </member>
        <member name="M:MicroServer.Extensions.CharExtensions.IsSafeUriChar(System.Char)">
            <summary>
            Check if the provided char is Uri safe
            </summary>
            <param name="source">Char to validate</param>
            <returns>True if the Char is Uri safe</returns>
        </member>
        <member name="T:MicroServer.Extensions.ArrayListExtensions">
            <summary>
            Extension methods for ArrayList
            </summary>
        </member>
        <member name="M:MicroServer.Extensions.ArrayListExtensions.AddRange(System.Collections.ArrayList,System.Array)">
            <summary>
            Add Range to ArrayList
            </summary>
            <param name="list">Aray List to add to</param>
            <param name="arr">Items to be added to the collection</param>
        </member>
        <member name="M:MicroServer.Extensions.ArrayListExtensions.RemoveRange(System.Collections.ArrayList,System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the ArrayList
            </summary>
            <param name="list">List to operate on</param>
            <param name="index">starting index</param>
            <param name="count"></param>
        </member>
        <member name="M:MicroServer.Extensions.ArrayListExtensions.Join(System.Array,System.String)">
            <summary>
            Adds a range of elements from the Array
            </summary>
            <param name="list">List to operate on</param>
            <param name="separator">starting index</param>
            <param name="count"></param>
        </member>
        <member name="T:MicroServer.Extensions.IntegerExtensions">
            <summary>
            Extension methods for Integers
            </summary>
        </member>
        <member name="M:MicroServer.Extensions.IntegerExtensions.ToHexString(System.Int16,System.String)">
            <summary>
            Converts a Integer to Hex string
            </summary>
            <param name="value">Integer to convert</param>
            <param name="prefix">String'0x' to include before the Hex value.</param>
            <returns>Integer value in Hex</returns>
        </member>
        <member name="M:MicroServer.Extensions.IntegerExtensions.ToHexString(System.Int32,System.String)">
            <summary>
            Converts a Integer to Hex string
            </summary>
            <param name="value">Integer to convert</param>
            <param name="prefix">String'0x' to include before the Hex value.</param>
            <returns>Integer value in Hex</returns>
        </member>
        <member name="M:MicroServer.Extensions.IntegerExtensions.ToHexString(System.UInt16,System.String)">
            <summary>
            Converts a Integer to Hex string
            </summary>
            <param name="value">Integer to convert</param>
            <param name="prefix">String'0x' to include before the Hex value.</param>
            <returns>Integer value in Hex</returns>
        </member>
        <member name="M:MicroServer.Extensions.IntegerExtensions.ToHexString(System.UInt32,System.String)">
            <summary>
            Converts a Integer to Hex string
            </summary>
            <param name="value">Integer to convert</param>
            <param name="prefix">String'0x' to include before the Hex value.</param>
            <returns>Integer value in Hex</returns>
        </member>
        <member name="T:MicroServer.Net.Sockets.UdpListener">
            <summary>
            A class that listen for UDP packets from remote clients.
            </summary>
        </member>
        <member name="T:MicroServer.Net.Sockets.SocketListener">
            <summary>
            A class that listen for remote clients.
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MicroServer.Net.Sockets.SocketListener"/> class.
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketListener.Finalize">
            <summary>
            Handles object cleanup for GC finalization.
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketListener.Dispose">
            <summary>
            Handles object cleanup.
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketListener.Dispose(System.Boolean)">
            <summary>
            Handles object cleanup
            </summary>
            <param name="disposing">True if called from Dispose(); false if called from GC finalization.</param>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketListener.Stop">
            <summary>
             Stops the service listener if in started state.
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketListener.OnSocket(System.Net.Sockets.Socket)">
            <summary>
            Reads socket and processes packet
            </summary>
            <param name="socket">The active socket.</param>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketListener.OnClientConnected(MicroServer.Net.Sockets.ClientConnectedEventArgs)">
            <summary>
                A client has connected (nothing have been sent or received yet)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketListener.OnClientDisconnected(System.Net.Sockets.Socket,System.Exception)">
            <summary>
                A client has disconnected
            </summary>
            <param name="socket">Channel representing the client that disconnected</param>
            <param name="exception">
                Exception which was used to detect disconnect (<c>SocketException</c> with status
                <c>Success</c> is created for graceful disconnects)
            </param>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketListener.HandleDisconnect(System.Net.Sockets.SocketError,System.Exception)">
            <summary>
            Detected a disconnect
            </summary>
            <param name="socketError">ProtocolNotSupported = decoder failure.</param>
            <param name="exception">Why socket got disconnected</param>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketListener.ActivePort">
            <summary>
                Port that the server is listening on.
            </summary>
            <remarks>
                You can use port <c>0</c> in <see cref="!:LocalPort"/> to let the OS assign a port. This method will then give you the
                assigned port.
            </remarks>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketListener.InterfaceAddress">
            <summary>
              Gets or sets the ip address for receiving data
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketListener.ReceiveTimeout">
            <summary>
              Gets or sets the timeout for receiving data.
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketListener.SendTimeout">
            <summary>
              Gets or sets the timeout for sending data.
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketListener.ListenBacklog">
            <summary>
              Gets or sets the socket listener backlog.
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketListener.BufferSize">
            <summary>
              Gets or sets the socket listener buffer size.
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketListener.IsActive">
            <summary>
              Gets or sets the socket listener active status.
            </summary>
        </member>
        <member name="E:MicroServer.Net.Sockets.SocketListener.ClientConnected">
            <summary>
                A client has connected (nothing have been sent or received yet)
            </summary>
        </member>
        <member name="E:MicroServer.Net.Sockets.SocketListener.ClientDisconnected">
            <summary>
                A client has disconnected
            </summary>
        </member>
        <member name="E:MicroServer.Net.Sockets.SocketListener.ListenerError">
            <summary>
                An internal error occured
            </summary>
        </member>
        <member name="T:MicroServer.Net.Sockets.SocketListener.ClientConnectedEventHandler">
            <summary>
                A client has connected (nothing have been sent or received yet)
            </summary>
        </member>
        <member name="T:MicroServer.Net.Sockets.SocketListener.ClientDisconnectedEventHandler">
            <summary>
                A client has disconnected
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.UdpListener.Start(System.Int32,System.Boolean)">
            <summary>
             Starts the service listener if it is in a stopped state.
            </summary>
            <param name="servicePort">The port used to listen on.</param>
            <param name="allowBroadcast">Allows the listener to accept broadcast packets.</param>
        </member>
        <member name="M:MicroServer.Net.Sockets.UdpListener.StartUdpListening">
            <summary>
             Listener thread
            </summary>
        </member>
        <member name="T:MicroServer.Net.Sockets.TcpListener">
            <summary>
            A class that listen for TCP packets from remote clients.
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.TcpListener.Start(System.Int32)">
            <summary>
             Starts the service listener if it is in a stopped state.
            </summary>
            <param name="servicePort">The port used to listen on.</param>
        </member>
        <member name="M:MicroServer.Net.Sockets.TcpListener.StartTcpListening">
            <summary>
             Listener thread
            </summary>
        </member>
        <member name="F:MicroServer.Serializers.Json.JsonHelpers.WhiteSpace">
            <summary>
            Define the whitespace-equivalent characters
            </summary>
        </member>
        <member name="M:MicroServer.Serializers.Json.JsonHelpers.Parse(System.String)">
            <summary>
            Parse a JSON-string to a specific DOM
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:MicroServer.Serializers.Json.JsonHelpers.Serialize(MicroServer.Serializers.Json.JToken)">
            <summary>
            Serialize the specific DOM to a JSON-string
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MicroServer.Serializers.Json.JsonHelpers.ConsumeWhiteSpace(MicroServer.Serializers.Json.JsonParserContext)">
            <summary>
            Consume an arbitrary number of whitespace characters
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:MicroServer.Serializers.Json.JsonHelpers.ConsumeAnyChar(MicroServer.Serializers.Json.JsonParserContext,System.String,System.Boolean)">
            <summary>
            Consume any character (at least one) in the specified set
            </summary>
            <param name="ctx"></param>
            <param name="charset"></param>
            <param name="throws"></param>
            <returns></returns>
        </member>
        <member name="M:MicroServer.Serializers.Json.JsonHelpers.ConsumeAllChars(MicroServer.Serializers.Json.JsonParserContext,System.String,System.Boolean)">
            <summary>
            Consume all the characters in the specified sequence
            </summary>
            <param name="ctx"></param>
            <param name="sequence"></param>
            <param name="throws"></param>
            <returns></returns>
        </member>
        <member name="M:MicroServer.Serializers.Json.JsonHelpers.ConsumeObject(MicroServer.Serializers.Json.JsonParserContext,System.Boolean)">
            <summary>
            Consume a JSON object
            </summary>
            <param name="ctx"></param>
            <param name="throws"></param>
            <returns></returns>
        </member>
        <member name="M:MicroServer.Serializers.Json.JsonHelpers.ConsumeArray(MicroServer.Serializers.Json.JsonParserContext,System.Boolean)">
            <summary>
            Consume a JSON array
            </summary>
            <param name="ctx"></param>
            <param name="throws"></param>
            <returns></returns>
        </member>
        <member name="M:MicroServer.Serializers.Json.JsonHelpers.ConsumeValue(MicroServer.Serializers.Json.JsonParserContext,System.Boolean)">
            <summary>
            Consume any suitable JSON value token
            </summary>
            <param name="ctx"></param>
            <param name="throws"></param>
            <returns></returns>
        </member>
        <member name="M:MicroServer.Serializers.Json.JsonHelpers.ConsumeNumber(MicroServer.Serializers.Json.JsonParserContext,System.Boolean)">
            <summary>
            Consume a JSON numeric token
            </summary>
            <param name="ctx"></param>
            <param name="throws"></param>
            <returns></returns>
        </member>
        <member name="M:MicroServer.Serializers.Json.JsonHelpers.ConsumeString(MicroServer.Serializers.Json.JsonParserContext,System.Boolean)">
            <summary>
            Consume a JSON string token
            </summary>
            <param name="ctx"></param>
            <param name="throws"></param>
            <returns></returns>
        </member>
        <member name="M:MicroServer.Serializers.Json.JsonHelpers.ConsumeBoolean(MicroServer.Serializers.Json.JsonParserContext,System.Boolean)">
            <summary>
            Consume a JSON boolean token
            </summary>
            <param name="ctx"></param>
            <param name="throws"></param>
            <returns></returns>
        </member>
        <member name="M:MicroServer.Serializers.Json.JsonHelpers.ConsumeNull(MicroServer.Serializers.Json.JsonParserContext,System.Boolean)">
            <summary>
            Consume the JSON "null" token
            </summary>
            <param name="ctx"></param>
            <param name="throws"></param>
            <returns></returns>
        </member>
        <member name="M:MicroServer.Serializers.Json.JsonHelpers.First(MicroServer.Serializers.Json.JsonParserContext,System.Boolean,MicroServer.Serializers.Json.JsonHelpers.JsonParseDelegate[])">
            <summary>
            Yield the consumption of the current context to a series of possible parsers
            The control will pass to the first one able to manage the source.
            </summary>
            <param name="ctx"></param>
            <param name="throws"></param>
            <param name="funcs"></param>
            <returns></returns>
        </member>
        <member name="T:MicroServer.Serializers.Json.JsonHelpers.JsonParseDelegate">
            <summary>
            Delegate used for the "smart" matching pattern selection
            </summary>
            <param name="ctx"></param>
            <param name="throws"></param>
            <returns></returns>
        </member>
        <member name="T:MicroServer.Serializers.Json.JSonReader">
            <summary>
            Trivial string reader
            </summary>
        </member>
        <member name="T:MicroServer.Serializers.Json.JsonParserContext">
            <summary>
            Context data used by the parser
            </summary>
        </member>
        <member name="T:MicroServer.Serializers.Json.JsonParseException">
            <summary>
            JSON parser specific exception thrown in case of error
            </summary>
        </member>
        <member name="T:MicroServer.Serializers.Json.JToken">
            <summary>
            Abstract base for any elemento of the JSON DOM
            </summary>
        </member>
        <member name="T:MicroServer.Serializers.Json.JValue">
            <summary>
            Represent a valued-node of the JSON DOM
            </summary>
        </member>
        <member name="T:MicroServer.Serializers.Json.JProperty">
            <summary>
            Represent a key-value pair instance used for the JSON object bag
            </summary>
        </member>
        <member name="T:MicroServer.Serializers.Json.JObject">
            <summary>
            Represent a JSON object
            </summary>
        </member>
        <member name="M:MicroServer.Serializers.Json.JObject.Add(System.String,MicroServer.Serializers.Json.JToken)">
            <summary>
            Add a keyed-value to the object's bag
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <remarks>You cannot use a key that is already existent in the bag</remarks>
        </member>
        <member name="P:MicroServer.Serializers.Json.JObject.Item(System.String)">
            <summary>
            Get an existent keyed-value from the bag.
            When set, the value replaces the existent entry, or is added if not present.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:MicroServer.Serializers.Json.JArray">
            <summary>
            Represent a JSON array
            </summary>
        </member>
        <member name="M:MicroServer.Serializers.Json.JArray.Add(MicroServer.Serializers.Json.JToken)">
            <summary>
            Add an object at the end of the collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MicroServer.Serializers.Json.JArray.Insert(System.Int32,MicroServer.Serializers.Json.JToken)">
            <summary>
            Insert an object at the specified position
            </summary>
            <param name="position"></param>
            <param name="item"></param>
        </member>
        <member name="M:MicroServer.Serializers.Json.JArray.RemoveAt(System.Int32)">
            <summary>
            Remove the entry at the specified position
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:MicroServer.Serializers.Json.JArray.Item(System.Int32)">
            <summary>
            Get the value stored at the specified position.
            When set, the value replaces the existent entry.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:MicroServer.Storage.FileStorage">
            <summary>
            File storage class
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:MicroServer.Storage.FileStorage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MicroServer.Storage.FileStorage"/> class.
            </summary>
        </member>
        <member name="M:MicroServer.Storage.FileStorage.Finalize">
            <summary>
            Handles object cleanup for GC finalization.
            </summary>
        </member>
        <member name="M:MicroServer.Storage.FileStorage.Dispose">
            <summary>
            Handles object cleanup.
            </summary>
        </member>
        <member name="M:MicroServer.Storage.FileStorage.Dispose(System.Boolean)">
            <summary>
            Handles object cleanup
            </summary>
            <param name="disposing">True if called from Dispose(); false if called from GC finalization.</param>
        </member>
        <member name="T:MicroServer.Storage.FlashStorage">
            <summary>
            Flash storage class
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:MicroServer.Storage.FlashStorage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MicroServer.Storage.FileStorage"/> class.
            </summary>
        </member>
        <member name="M:MicroServer.Storage.FlashStorage.Finalize">
            <summary>
            Handles object cleanup for GC finalization.
            </summary>
        </member>
        <member name="M:MicroServer.Storage.FlashStorage.Dispose">
            <summary>
            Handles object cleanup.
            </summary>
        </member>
        <member name="M:MicroServer.Storage.FlashStorage.Dispose(System.Boolean)">
            <summary>
            Handles object cleanup
            </summary>
            <param name="disposing">True if called from Dispose(); false if called from GC finalization.</param>
        </member>
        <member name="T:MicroServer.Utilities.ParseUtility">
            <summary>
            Provides additional parsing operations
            </summary>
        </member>
        <member name="M:MicroServer.Utilities.ParseUtility.TryParseInt(System.String,System.Int32@)">
            <summary>
            Attempt to parse the provided string value.
            </summary>
            <param name="value">String value to be parsed</param>
            <param name="i">Variable to set successfully parsed value to</param>
            <returns>True if parsing was successful</returns>
        </member>
        <member name="M:MicroServer.Utilities.ParseUtility.TryParseShort(System.String,System.Int16@)">
            <summary>
            Attempt to parse the provided string value.
            </summary>
            <param name="value">String value to be parsed</param>
            <param name="i">Variable to set successfully parsed value to</param>
            <returns>True if parsing was successful</returns>
        </member>
        <member name="M:MicroServer.Utilities.ParseUtility.TryParseLong(System.String,System.Int64@)">
            <summary>
            Attempt to parse the provided string value.
            </summary>
            <param name="value">String value to be parsed</param>
            <param name="i">Variable to set successfully parsed value to</param>
            <returns>True if parsing was successful</returns>
        </member>
        <member name="M:MicroServer.Utilities.ParseUtility.TryParseDouble(System.String,System.Double@)">
            <summary>
            Attempt to parse the provided string value.
            </summary>
            <param name="value">String value to be parsed</param>
            <param name="i">Variable to set successfully parsed value to</param>
            <returns>True if parsing was successful</returns>
        </member>
        <member name="M:MicroServer.Utilities.ParseUtility.TryParseBool(System.String,System.Boolean@)">
            <summary>
            Attempt to parse the provided string value.
            </summary>
            <param name="value">String value to be parsed</param>
            <param name="val">Variable to set successfully parsed value to</param>
            <returns>True if parsing was successful</returns>
        </member>
        <member name="M:MicroServer.Utilities.ParseUtility.TryParseUInt(System.String,System.UInt32@)">
            <summary>
            Attempt to parse the provided string value.
            </summary>
            <param name="value">String value to be parsed</param>
            <param name="i">Variable to set successfully parsed value to</param>
            <returns>True if parsing was successful</returns>
        </member>
        <member name="M:MicroServer.Utilities.ParseUtility.TryParseUShort(System.String,System.UInt16@)">
            <summary>
            Attempt to parse the provided string value.
            </summary>
            <param name="value">String value to be parsed</param>
            <param name="i">Variable to set successfully parsed value to</param>
            <returns>True if parsing was successful</returns>
        </member>
        <member name="M:MicroServer.Utilities.ParseUtility.TryParseULong(System.String,System.UInt64@)">
            <summary>
            Attempt to parse the provided string value.
            </summary>
            <param name="value">String value to be parsed</param>
            <param name="i">Variable to set successfully parsed value to</param>
            <returns>True if parsing was successful</returns>
        </member>
        <member name="M:MicroServer.Utilities.ParseUtility.TryParseDateTime(System.String)">
            <summary>
            Attempt to parse the provided datetime value.
            </summary>
            <param name="datetime">Datetime value to be parsed</param>
            <returns>Datetime if parsing was successful</returns>
        </member>
        <member name="M:MicroServer.Utilities.ParseUtility.TryParseHex(System.String,System.Byte@)">
            <summary>
            Converts a hex string to a byte value
            </summary>
            <param name="value">Byte value as output parameter</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:MicroServer.Utilities.ParseUtility.TryParseHex(System.String,System.Int16@)">
            <summary>
            Converts a hex string to an Int16 value
            </summary>
            <param name="value">Int16 value as output parameter</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:MicroServer.Utilities.ParseUtility.TryParseHex(System.String,System.Int32@)">
            <summary>
            Converts a hex string to an Int32 value
            </summary>
            <param name="value">Int32 value as output parameter</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:MicroServer.Utilities.ParseUtility.TryParseHex(System.String,System.UInt16@)">
            <summary>
            Converts a hex string to an UInt16 value
            </summary>
            <param name="value">UInt16 value as output parameter</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:MicroServer.Utilities.ParseUtility.TryParseHex(System.String,System.UInt32@)">
            <summary>
            Converts a hex string to an UInt32 value
            </summary>
            <param name="value">UInt32 value as output parameter</param>
            <returns>True if successful</returns>
        </member>
        <member name="T:MicroServer.Extensions.StringExtensions">
            <summary>
            Extension methods for Strings
            </summary>
        </member>
        <member name="M:MicroServer.Extensions.StringExtensions.StartsWith(System.String,System.String)">
            <summary>
            Determines if the string 'source' starts with string 'value'.
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <returns>True if string starts with value</returns>
        </member>
        <member name="M:MicroServer.Extensions.StringExtensions.EndsWith(System.String,System.String)">
            <summary>
            Determines if the string 'source' ends with string 'value'.
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <returns>True if string ends with value</returns>
        </member>
        <member name="M:MicroServer.Extensions.StringExtensions.Contains(System.String,System.String)">
            <summary>
            Determines if the string 'source' contains the string 'value'.
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <returns>True if string ends with value</returns>
        </member>
        <member name="M:MicroServer.Extensions.StringExtensions.Replace(System.String,System.String,System.String)">
            <summary>
            Replace all occurrences of the 'find' string with the 'replace' string.
            </summary>
            <param name="source">Original string</param>
            <param name="find">String to find within the original string</param>
            <param name="replace">String to be used in place of the find string</param>
            <returns>Final string after all instances have been replaced.</returns>
        </member>
        <member name="F:MicroServer.IO.ByteOrder.Default">
            <summary>Use the default byte order for the computer.</summary>
        </member>
        <member name="F:MicroServer.IO.ByteOrder.BigEndian">
            <summary>Use big-endian byte order, also known as Motorola byte order.</summary>
        </member>
        <member name="F:MicroServer.IO.ByteOrder.LittleEndian">
            <summary>Use little-endian byte order, also known as Intel byte order.</summary>
        </member>
        <member name="F:MicroServer.IO.ByteOrder.Motorola">
            <summary>Use Motorola byte order. Corresponds to <see cref="F:MicroServer.IO.ByteOrder.BigEndian"/>.</summary>
        </member>
        <member name="F:MicroServer.IO.ByteOrder.Intel">
            <summary>Use Intel byte order. Corresponds to <see cref="F:MicroServer.IO.ByteOrder.LittleEndian"/>.</summary>
        </member>
        <member name="F:MicroServer.IO.ByteOrder.Network">
            <summary>The order which multi-byte values are transmitted on a network.</summary>
        </member>
        <member name="T:MicroServer.IO.ByteReader">
            <summary>
            Class to read bytes from a byte array.
            </summary>
        </member>
        <member name="M:MicroServer.IO.ByteReader.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of ByteReader with UTF-8 encoding.
            </summary>
            <param name="message">The bytes to read from</param>
        </member>
        <member name="M:MicroServer.IO.ByteReader.#ctor(System.Byte[],MicroServer.IO.ByteOrder)">
            <summary>
            Creates a new instance of ByteReader
            </summary>
            <param name="message"></param>
            <param name="byteOrder"></param>
        </member>
        <member name="M:MicroServer.IO.ByteReader.GetAvailableBytes">
            <summary>
            Gets the available bytes from current position.
            </summary>
            <returns>A byte array</returns>
        </member>
        <member name="M:MicroServer.IO.ByteReader.Copy">
            <summary>
            Copyies the ByteReader array with current position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MicroServer.IO.ByteReader.Peek">
            <summary>
            Reads the next byte from the current position without changing current position.
            </summary>
            <returns>The next byte to read.</returns>
        </member>
        <member name="M:MicroServer.IO.ByteReader.ReadByte">
            <summary>
            Reads a byte from the current position and advances the position by one byte.
            </summary>
            <returns>The next byte.</returns>
        </member>
        <member name="M:MicroServer.IO.ByteReader.ReadBytes(System.Int32)">
            <summary>
            Reads <paramref name="length"/> bytes from the current position and advances the position by <paramref name="length"/>.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:MicroServer.IO.ByteReader.ReadBoolean">
            <summary>
            Reads a bool value from the current position and advances the position by one byte.
            </summary>
            <returns>True if byte is non-zero; otherwise false.</returns>
        </member>
        <member name="M:MicroServer.IO.ByteReader.ReadInt16">
            <summary>
            Reads a 2-byte signed integer from the current position and advances the position by two bytes.
            </summary>
            <returns>A 2-byte signed integer read from the current position.</returns>
        </member>
        <member name="M:MicroServer.IO.ByteReader.ReadInt32">
            <summary>
            Reads a 4-byte signed integer from the current position and advances the position by two bytes.
            </summary>
            <returns>A 4-byte signed integer read from the current position.</returns>
        </member>
        <member name="M:MicroServer.IO.ByteReader.ReadInt64">
            <summary>
            Reads a 8-byte signed integer from the current position and advances the position by two bytes.
            </summary>
            <returns>A 8-byte signed integer read from the current position.</returns>
        </member>
        <member name="M:MicroServer.IO.ByteReader.ReadUInt16">
            <summary>
            Reads a 2-byte unsigned integer from the current position and advances the position by two bytes.
            </summary>
            <returns>A 2-byte unsigned integer read from the current position.</returns>
        </member>
        <member name="M:MicroServer.IO.ByteReader.ReadUInt32">
            <summary>
            Reads a 4-byte unsigned integer from the current position and advances the position by two bytes.
            </summary>
            <returns>A 4-byte unsigned integer read from the current position.</returns>
        </member>
        <member name="M:MicroServer.IO.ByteReader.ReadUInt64">
            <summary>
            Reads a 8-byte unsigned integer from the current position and advances the position by two bytes.
            </summary>
            <returns>A 8-byte unsigned integer read from the current position.</returns>
        </member>
        <member name="M:MicroServer.IO.ByteReader.ReadChar">
            <summary>
            Reads the next character from the current position and advances the position by one byte.
            </summary>
            <returns>A character read from the current position.</returns>
        </member>
        <member name="M:MicroServer.IO.ByteReader.ReadString(System.Int32)">
            <summary>
            Reads <paramref name="length"/> characters from the current position and advances the position by <paramref name="length"/> bytes.
            </summary>
            <param name="length">The number of characters to read.</param>
            <returns>A string read from the current position.</returns>
        </member>
        <member name="M:MicroServer.IO.ByteReader.ReadString(System.Byte)">
            <summary>
            Reads a string from the current position until the first occurance of the <paramref name="terminator"/>.
            </summary>
            <param name="terminator">The terminator to read to.</param>
            <returns>A string read until the first occurance of <paramref name="terminator"/>.</returns>
        </member>
        <member name="M:MicroServer.IO.ByteReader.ReadString">
            <summary>
            Reads a string from the current position. The length of the string is encoded from prefixed 32-bit integer.
            </summary>
            <returns>A string with lengh of prefixed 32-bit integer.</returns>
        </member>
        <member name="M:MicroServer.IO.ByteReader.Dispose(System.Boolean)">
            <summary>
            Handles cleanup
            </summary>
            <param name="disposing">True if called from Dispose(); false if called from GC finalization.</param>
        </member>
        <member name="M:MicroServer.IO.ByteReader.Dispose">
            <summary>
            Handles cleanup
            </summary>
        </member>
        <member name="P:MicroServer.IO.ByteReader.AvailableBytes">
            <summary>
            Gets the number of bytes available until end of the byte array.
            </summary>
        </member>
        <member name="M:MicroServer.IO.ByteWriter.#ctor">
            <summary>
            Creates a new instance of ByteWriter using UTF-8 encoding.
            </summary>
        </member>
        <member name="M:MicroServer.IO.ByteWriter.Write(System.Byte)">
            <summary>
            Writes one byte to the stream.
            </summary>
            <param name="b">The byte to write to the stream.</param>
        </member>
        <member name="M:MicroServer.IO.ByteWriter.Write(System.Byte[])">
            <summary>
            Writes one or more bytes to the stream.
            </summary>
            <param name="bytes">The bytes to write to the stream.</param>
        </member>
        <member name="M:MicroServer.IO.ByteWriter.Write(System.Boolean)">
            <summary>
            Writes a boolean value to the stream. If true write 0; otherwise 1.
            </summary>
            <param name="b">The boolean to write.</param>
        </member>
        <member name="M:MicroServer.IO.ByteWriter.Write(System.Int16)">
            <summary>
            Writes a 2-byte signed integer to the stream.
            </summary>
            <param name="s">The 2-byte signed integer to write.</param>
        </member>
        <member name="M:MicroServer.IO.ByteWriter.Write(System.Int32)">
            <summary>
            Writes a 4-byte signed integer to the stream.
            </summary>
            <param name="i">The 4-byte signed integer to write</param>
        </member>
        <member name="M:MicroServer.IO.ByteWriter.Write(System.Int64)">
            <summary>
            Writes a 8-byte signed integer to the stream.
            </summary>
            <param name="i">The 8-byte signed integer to write</param>
        </member>
        <member name="M:MicroServer.IO.ByteWriter.Write(System.UInt16)">
            <summary>
            Writes a 2-byte unsigned integer to the stream.
            </summary>
            <param name="i">The 2-byte unsigned integer to write</param>
        </member>
        <member name="M:MicroServer.IO.ByteWriter.Write(System.UInt32)">
            <summary>
            Writes a 4-byte unsigned integer to the stream.
            </summary>
            <param name="i">The 4-byte unsigned integer to write</param>
        </member>
        <member name="M:MicroServer.IO.ByteWriter.Write(System.UInt64)">
            <summary>
            Writes a 8-byte unsigned integer to the stream.
            </summary>
            <param name="i">The 8-byte unsigned integer to write</param>
        </member>
        <member name="M:MicroServer.IO.ByteWriter.Write(System.Char)">
            <summary>
            Writes a character to the stream.
            </summary>
            <param name="c">The character to write.</param>
        </member>
        <member name="M:MicroServer.IO.ByteWriter.Write(System.String)">
            <summary>
            Writes a string to the stream.
            </summary>
            <param name="s">The string to write.</param>
        </member>
        <member name="M:MicroServer.IO.ByteWriter.WriteString(System.String)">
            <summary>
            Writes a string to the current stream. The string is prefixed with the length, encoded as 32-bit integer.
            </summary>
            <param name="s">The string to write.</param>
        </member>
        <member name="M:MicroServer.IO.ByteWriter.GetBytes">
            <summary>
            Gets the bytes written to the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MicroServer.Logging.DebugLogger">
            <summary>
            DebugLogger class
            </summary>
            <remarks>Implements a Debug (Output) window based data logger for use in the Logger static class.</remarks>
        </member>
        <member name="T:MicroServer.Logging.FileLogger">
            <summary>
            FileLogger class
            </summary>
            <remarks>Implements a file-based data logger for use in the Logger static class.</remarks>
        </member>
        <member name="T:MicroServer.Net.Sockets.ClientConnectedEventArgs">
            <summary>
                Used by <see cref="M:MicroServer.Net.Sockets.SocketListener.OnClientConnected(MicroServer.Net.Sockets.ClientConnectedEventArgs)"/>.
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.ClientConnectedEventArgs.#ctor(System.Net.Sockets.Socket)">
            <summary>
                Initializes a new instance of the <see cref="T:MicroServer.Net.Sockets.ClientConnectedEventArgs"/> class.
            </summary>
            <param name="socket">The channel.</param>
        </member>
        <member name="M:MicroServer.Net.Sockets.ClientConnectedEventArgs.#ctor(System.Net.Sockets.Socket,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:MicroServer.Net.Sockets.ClientConnectedEventArgs"/> class.
            </summary>
            <param name="socket">The channel.</param>
            <param name="messageBuffer">The message buffer.</param>
        </member>
        <member name="M:MicroServer.Net.Sockets.ClientConnectedEventArgs.CancelConnection">
            <summary>
                Cancel connection, will make the listener close it.
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.ClientConnectedEventArgs.CancelConnection(System.IO.Stream)">
            <summary>
                Close the listener, but send a response (you are yourself responsible of encoding it to a message)
            </summary>
            <param name="response">Stream with encoded message (which can be sent as-is).</param>
        </member>
        <member name="P:MicroServer.Net.Sockets.ClientConnectedEventArgs.Channel">
            <summary>
                Channel for the connected client
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.ClientConnectedEventArgs.ChannelBuffer">
            <summary>
                Buffer for the connected client
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.ClientConnectedEventArgs.Response">
            <summary>
                Response (only if the client may not connect)
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.ClientConnectedEventArgs.AllowConnect">
            <summary>
                Determines if the client may connect.
            </summary>
        </member>
        <member name="T:MicroServer.Net.Sockets.DisconnectHandler">
            <summary>
            <see cref="T:MicroServer.Net.Sockets.SocketChannel"/> was disconnected
            </summary>
            <param name="sender">Channel which got disconnected</param>
            <param name="exception">Exception  (<c>SocketException</c> for TCP/IP errors)</param>
            <seealso cref="T:MicroServer.Net.Sockets.SocketChannel"/>
        </member>
        <member name="T:MicroServer.Net.Sockets.ErrorHandler">
            <summary>
            <see cref="T:MicroServer.Net.Sockets.SocketChannel"/> have sent or received a message.
            </summary>
            <param name="sender">Channel that did the work</param>
            <param name="exception">Message. depends on which encoder/decoder was used.</param>
            <remarks>We uses delegates instead of regular events to make sure that there are only one subscriber and that it's configured once.</remarks>
        </member>
        <member name="T:MicroServer.Net.Sockets.MessageHandler">
            <summary>
            <see cref="T:MicroServer.Net.Sockets.SocketChannel"/> has sent or received a message.
            </summary>
            <param name="sender">Channel that did the work</param>
            <param name="args">Socket event arguments.</param>
            <remarks>We uses delegates instead of regular events to make sure that there are only one subscriber and that it's configured once.</remarks>
        </member>
        <member name="T:MicroServer.Net.Sockets.SocketBuffer">
            <summary>
                Socket buffer used by the socket channel
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketBuffer.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MicroServer.Net.Sockets.SocketBuffer"/> class.
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketBuffer.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:MicroServer.Net.Sockets.SocketBuffer"/> class.
            </summary>
            <param name="size">The number of bytes used to create the buffer .</param>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketBuffer.SetBuffer(System.Byte[])">
            <summary>
                Sets the data buffer to use with socket method.
            </summary>
            <param name="buffer">The data buffer to use with an asynchronous socket method.</param>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketBuffer.SetBuffer(System.Int32,System.Int32)">
            <summary>
                Sets the data buffer to use with socket method.
            </summary>
            <param name="offset">The offset, in bytes, in the data buffer where the operation starts.</param>
            <param name="length">The maximum amount of data, in bytes, to send or receive in the buffer.</param>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketBuffer.SetBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Sets the data buffer to use with socket method.
            </summary>
            <param name="buffer">The data buffer to use with an asynchronous socket method.</param>
            <param name="offset">The offset, in bytes, in the data buffer where the operation starts.</param>
            <param name="length">The maximum amount of data, in bytes, to send or receive in the buffer.</param>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketBuffer.SetBuffer(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets the data buffer to use with socket method.
            </summary>
            <param name="buffer">The data buffer to use with an asynchronous socket method.</param>
            <param name="offset">The offset, in bytes, in the data buffer where the operation starts.</param>
            <param name="length">The maximum amount of data, in bytes, to send or receive in the buffer.</param>
            <param name="capacity">The number of bytes buffer has allocated. </param>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketBuffer.Clear">
            <summary>
            Clears the data buffer.
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketBuffer.Buffer">
            <summary>
                The data buffer to use with socket method.
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketBuffer.Length">
            <summary>
                The length of valid content.
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketBuffer.Capacity">
            <summary>
                The number of bytes buffer has allocated.
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketBuffer.Offset">
            <summary>
                The position in the data buffer.
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketBuffer.BaseOffset">
            <summary>
                The base position in the data buffer.
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketBuffer.BytesTransferred">
            <summary>
                The total number of bytes transferred to or from socket buffer.
            </summary>
        </member>
        <member name="T:MicroServer.Net.Sockets.SocketChannel">
            <summary>
            Represents a socket connection between two end points.
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketChannel.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MicroServer.Net.Sockets.SocketChannel"/> class.
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketChannel.Finalize">
            <summary>
            Handles object cleanup for GC finalization.
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketChannel.Dispose">
            <summary>
            Handles object cleanup.
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketChannel.Dispose(System.Boolean)">
            <summary>
            Handles object cleanup
            </summary>
            <param name="disposing">True if called from Dispose(); false if called from GC finalization.</param>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketChannel.Assign(System.Net.Sockets.Socket)">
            <summary>
                Assign a socket to this channel
            </summary>
            <param name="socket">Connected socket for channel.</param>
            <remarks>
                The channel will start receive new messages as soon as you've called assign.
                <para>
                    You must have specified a <see cref="P:MicroServer.Net.Sockets.SocketChannel.MessageReceived"/> delegate first.
                </para>
            </remarks>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketChannel.SendTo(System.Byte[],System.Net.EndPoint)">
            <summary>
                Send a new message to a connected socket.
            </summary>
            <param name="message">An array of type byte that contains the data to be sent.</param>
            <param name="endPoint">An EndPoint that represents the remote device. </param>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketChannel.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
            <summary>
                Send a new message to a connected socket.
            </summary>
            <param name="message">An array of type byte that contains the data to be sent.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <param name="endPoint">An EndPoint that represents the remote device. </param>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketChannel.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
            <summary>
                Send a new message to a connected socket.
            </summary>
            <param name="message">An array of type byte that contains the data to be sent.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <param name="endPoint">An EndPoint that represents the remote device. </param>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketChannel.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
            <summary>
                Send a new message to a connected socket.
            </summary>
            <param name="message">An array of type byte that contains the data to be sent.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="offset">The position in the data buffer at which to begin sending data.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <param name="endPoint">An EndPoint that represents the remote device. </param>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketChannel.Send(MicroServer.Net.Sockets.SocketBuffer)">
            <summary>
                Send a new message to a connected socket.
            </summary>
            <param name="message">A message type Socket Buffer that contains the data to be sent.</param>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketChannel.Send(System.IO.Stream)">
            <summary>
                Send a new message to a connected socket.
            </summary>
            <param name="message">A message type Stream that contains the data to be sent.</param>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketChannel.Send(System.Byte[])">
            <summary>
                 Send a new message to a connected socket.
            </summary>
            <param name="message">An array of type byte that contains the data to be sent.</param>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketChannel.Send(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
                Send a new message to a connected socket.
            </summary>
            <param name="message">An array of type byte that contains the data to be sent.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketChannel.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
                Send a new message to a connected socket.
            </summary>
            <param name="message">An array of type byte that contains the data to be sent.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketChannel.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
                Send a new message to a connected socket.
            </summary>
            <param name="message">An array of type byte that contains the data to be sent.</param>
            <param name="offSet">The position in the data buffer at which to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketChannel.Close">
            <summary>
                Signal the channel to close.
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketChannel.HandleDisconnect(System.Net.Sockets.SocketError)">
            <summary>
            Detected a disconnect
            </summary>
            <param name="socketError">Socket failure reason.</param>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketChannel.HandleDisconnect(System.Net.Sockets.SocketError,System.Exception)">
            <summary>
            Detected a disconnect
            </summary>
            <param name="socketError">Socket failure reason.</param>
            <param name="exception">Why it was disconnected.</param>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketChannel.RemoteEndpoint">
            <summary>
                Gets address of the connected end point.
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketChannel.Socket">
            <summary>
                Gets socket for the connected end point.
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketChannel.ChannelId">
            <summary>
                Identity of this channel
            </summary>
            <remarks>
                Must be unique within a server.
            </remarks>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketChannel.Data">
            <summary>
                Can be used to store information in the channel so that you can access it at later requests.
            </summary>
            <remarks>
                <para>All data is lost when the channel is closed.</para>
            </remarks>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketChannel.IsConnected">
            <summary>
            Gets if channel is connected
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketChannel.Disconnected">
            <summary>
                Channel got disconnected
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketChannel.MessageReceived">
            <summary>
                Channel received a new message
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketChannel.MessageSent">
            <summary>
                Channel have sent a message
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketChannel.ChannelFailure">
            <summary>
                The channel failed to complete an IO operation
            </summary>
            <remarks>
                <para>
                    The handler MUST close the connection once a reply have been sent.
                </para>
            </remarks>
        </member>
        <member name="E:MicroServer.Net.Sockets.SocketChannel.ChannelError">
            <summary>
                An internal error occured
            </summary>
        </member>
        <member name="T:MicroServer.Net.Sockets.SocketEventArgs">
            <summary>
                Used by <see cref="E:MicroServer.Net.Sockets.SocketListener.ClientConnected"/>.
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketEventArgs.#ctor(System.Net.Sockets.Socket)">
            <summary>
                Initializes a new instance of the <see cref="T:MicroServer.Net.Sockets.ClientConnectedEventArgs"/> class.
            </summary>
            <param name="socket">The channel.</param>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketEventArgs.Channel">
            <summary>
                Channel for the connected client
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketEventArgs.ChannelBuffer">
            <summary>
                Buffer for the connected client
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketEventArgs.Response">
            <summary>
                Response (only if the client may not connect)
            </summary>
        </member>
        <member name="T:MicroServer.Net.Sockets.ClientDisconnectedEventArgs">
            <summary>
                Event arguments for <see cref="E:MicroServer.Net.Sockets.SocketListener.ClientDisconnected"/>.
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.ClientDisconnectedEventArgs.#ctor(System.Net.Sockets.Socket,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MicroServer.Net.Sockets.ClientDisconnectedEventArgs"/> class.
            </summary>
            <param name="socket">The channel that disconnected.</param>
            <param name="exception">The exception that was caught.</param>
        </member>
        <member name="P:MicroServer.Net.Sockets.ClientDisconnectedEventArgs.Socket">
            <summary>
            Channel that was disconnected
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.ClientDisconnectedEventArgs.Exception">
            <summary>
            Exception that was caught (is SocketException if the connection failed or if the remote end point disconnected).
            </summary>
            <remarks>
            <c>SocketException</c> with status <c>Success</c> is created for graceful disconnects.
            </remarks>
        </member>
        <member name="T:MicroServer.Net.Sockets.SocketService">
            <summary>
            Implementation of <see cref="T:MicroServer.Net.Sockets.SocketService"/> that serves socket requests from remote clients.
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MicroServer.Net.Sockets.SocketService"/> class.
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketService.Finalize">
            <summary>
            Handles object cleanup for GC finalization.
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketService.Dispose">
            <summary>
            Handles object cleanup.
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketService.Dispose(System.Boolean)">
            <summary>
            Handles object cleanup
            </summary>
            <param name="disposing">True if called from Dispose(); false if called from GC finalization.</param>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketService.Start">
            <summary>
             Starts the service listener if it is in a stopped state.
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketService.Stop">
            <summary>
             Stops the service listener if in started state.
            </summary>
        </member>
        <member name="M:MicroServer.Net.Sockets.SocketService.Restart">
            <summary>
             Restarts the service listener if in a started state.
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketService.InterfaceAddress">
            <summary>
              Gets or sets the ip address for receiving data
            </summary>
        </member>
        <member name="P:MicroServer.Net.Sockets.SocketService.ServicePort">
            <summary>
              Gets or sets the port for receiving data
            </summary>
        </member>
        <member name="T:MicroServer.Threading.WaitCallback">
            <summary>
            Represents a callback method to be executed by a thread pool thread.
            </summary>
            <param name="state">An object containing information to be used by the callback method.</param>
        </member>
        <member name="T:MicroServer.Threading.ThreadPool">
            <summary>
            Provides a pool of threads that can be used to execute tasks, post work items, 
            process asynchronous I/O, wait on behalf of other threads, and process timers.
            </summary>
            <remarks>
            Because the maximum number of threads used by the ThreadPool only short running
            operations should be executed by using it.
            Multiple long running operations would block the available threads.
            New operations will not be called at all if all threads are blocked.
            </remarks>
        </member>
        <member name="M:MicroServer.Threading.ThreadPool.QueueUserWorkItem(MicroServer.Threading.WaitCallback)">
            <summary>
            Queues a method for execution. The method executes when a thread pool thread becomes available.
            </summary>
            <param name="callback">A WaitCallback that represents the method to be executed.</param>
            <returns>true if the method is successfully queued.</returns>
        </member>
        <member name="M:MicroServer.Threading.ThreadPool.QueueUserWorkItem(MicroServer.Threading.WaitCallback,System.Object)">
            <summary>
            Queues a method for execution, and specifies an object containing data to be used by the method. 
            The method executes when a thread pool thread becomes available.
            </summary>
            <param name="callback">A WaitCallback representing the method to execute.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>true if the method is successfully queued.</returns>
        </member>
        <member name="M:MicroServer.Threading.ThreadPool.GetMinThreads">
            <summary>
            Retrieves the minimum number of threads the thread pool creates on demand.
            </summary>
            <returns>Returns the minimum number of worker threads that the thread pool creates on demand.</returns>
        </member>
        <member name="M:MicroServer.Threading.ThreadPool.SetMinThreads(System.Int32)">
            <summary>
            Sets the minimum number of threads the thread pool creates on demand.
            </summary>
            <param name="count">The minimum number of worker threads that the thread pool creates on demand.</param>
            <returns>true if the change is successful; otherwise, false.</returns>
        </member>
        <member name="M:MicroServer.Threading.ThreadPool.GetMaxThreads">
            <summary>
            Retrieves the number of requests to the thread pool that can be active concurrently. 
            All requests above that number remain queued until thread pool threads become available.
            </summary>
            <returns>The maximum number of asynchronous I/O threads in the thread pool.</returns>
        </member>
        <member name="M:MicroServer.Threading.ThreadPool.SetMaxThreads(System.Int32)">
            <summary>
            Sets the number of requests to the thread pool that can be active concurrently. 
            All requests above that number remain queued until thread pool threads become available.
            </summary>
            <param name="count">The maximum number of worker threads in the thread pool.</param>
            <returns>true if the change is successful; otherwise, false.</returns>
        </member>
        <member name="M:MicroServer.Threading.ThreadPool.Shutdown">
            <summary>
            Shuts down all threads after they have finished theire work.
            </summary>
        </member>
        <member name="E:MicroServer.Threading.ThreadPool.UnhandledThreadPoolException">
            <summary>
            Is fired when a excption in one of the worker threads in unhandeld.
            </summary>
        </member>
        <member name="T:MicroServer.Utilities.StringUtility">
            <summary>
            Provides additional string operations
            </summary>
        </member>
        <member name="M:MicroServer.Utilities.StringUtility.IsNullOrEmpty(System.String)">
            <summary>
            Check if the provided string is either null or empty
            </summary>
            <param name="source">String to validate</param>
            <returns>True if the string is null or empty</returns>
        </member>
        <member name="M:MicroServer.Utilities.StringUtility.IsNullOrWhiteSpace(System.String)">
            <summary>
            Check if the provided string is either null or white space
            </summary>
            <param name="source">String to validate</param>
            <returns>True if the string is null or white space</returns>
        </member>
        <member name="M:MicroServer.Utilities.StringUtility.SplitComponents(System.String,System.Char)">
            <summary>
            Split a string by deliminator
            </summary>
            <param name="source"></param>
            <param name="deliminator"></param>
            <returns></returns>
        </member>
        <member name="M:MicroServer.Utilities.StringUtility.InQuotes(System.String,System.Int32)">
            <summary>
            Determine if a specific character is inside of a quote string
            </summary>
            <param name="source"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:MicroServer.Utilities.StringUtility.MatchWildCard(System.String,System.String,System.Boolean)">
            <summary>
            Determine if a string includes a pattern using "*" and "?" as wild cards 
            </summary>
            <param name="source"></param>
            <param name="pattern"></param>
            <param name="caseSensitive"></param>
            <returns>True if pattern wild card matches</returns>
        </member>
        <member name="M:MicroServer.Utilities.StringUtility.Base64Encode(System.String)">
            <summary>
            Encodes a string according to the BASE64 standard
            </summary>
            <param name="value">The input string</param>
            <returns>The output string</returns>
        </member>
        <member name="M:MicroServer.Utilities.StringUtility.FormatDiskSize(System.Int64)">
            <summary>
            Return X.X Byte/KB/MB/GB/TB
            </summary>
            <param name="value">Size</param>
            <returns></returns>
        </member>
        <member name="M:MicroServer.Utilities.StringUtility.ZeroFill(System.String,System.Int32,System.Char)">
            <summary>
            Changes a number into a string and add zeros in front of it, if required
            </summary>
            <param name="number">The input number</param>
            <param name="digits">The amount of digits it should be</param>
            <param name="character">The character to repeat in front (default: 0)</param>
            <returns>A string with the right amount of digits</returns>
        </member>
        <member name="M:MicroServer.Utilities.StringUtility.ZeroFill(System.Int32,System.Int32,System.Char)">
            <summary>
            Changes a number into a string and add zeros in front of it, if required
            </summary>
            <param name="Number">The input number</param>
            <param name="MinLength">The amount of digits it should be</param>
            <param name="Character">The character to repeat in front (default: 0)</param>
            <returns>A string with the right amount of digits</returns>
        </member>
        <member name="M:MicroServer.Utilities.StringUtility.Replace(System.String,System.String,System.String)">
            <summary>
            Replace all occurances of the 'find' string with the 'replace' string.
            </summary>
            <param name="source">Original string</param>
            <param name="find">String to find within the original string</param>
            <param name="replace">String to be used in place of the find string</param>
            <returns>Final string after all instances have been replaced.</returns>
        </member>
        <member name="M:MicroServer.Utilities.StringUtility.ReplaceEmptyOrNull(System.String,System.String)">
            <summary>
            Finds and replaces empty or null within a string
            </summary>
            <param name="source"></param>
            <param name="replaceWith"></param>
            <returns>source</returns>
        </member>
        <member name="M:MicroServer.Utilities.StringUtility.ReplaceEmptyOrNull(System.Object,System.String)">
            <summary>
            Finds and replaces empty or null within a string
            </summary>
            <param name="source"></param>
            <param name="replaceWith"></param>
            <returns>Value</returns>
        </member>
        <member name="M:MicroServer.Utilities.StringUtility.Sort(System.String[])">
            <summary>
            Sorts an array of strings.
            </summary>
            <remarks>
            Original code by user "Jay Jay"
            http://www.tinyclr.com/codeshare/entry/475
            Modified to be specifically suites to sorting arrays of strings.    
            </remarks>
            <param name="array">Array of string to be sorted.</param>
        </member>
        <member name="M:MicroServer.Utilities.StringUtility.Sort(System.String[],System.Int32,System.Int32)">
            <summary>
            This is a generic version of C.A.R Hoare's Quick Sort 
            algorithm.  This will handle arrays that are already
            sorted, and arrays with duplicate keys.
            </summary>
            <remarks>
            If you think of a one dimensional array as going from
            the lowest index on the left to the highest index on the right
            then the parameters to this function are lowest index or
            left and highest index or right.  The first time you call
            this function it will be with the parameters 0, a.length - 1.
            </remarks>
            <param name="array">Array of string to be sorted.</param>
            <param name="l">Left boundary of array partition</param>
            <param name="r">Right boundary of array partition</param>
        </member>
        <member name="M:MicroServer.Utilities.StringUtility.Format(System.String,System.Object)">
            <summary>
            Replaces one or more format items in a specified string with the string representation of a specified object.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg">The object to format.</param>
            <returns>A copy of format in which any format items are replaced by the string representation of arg0.</returns>
            <exception cref="T:MicroServer.Utilities.FormatException">format is invalid, or the index of a format item is less than zero, or greater than or equal to the length of the args array.</exception>
            <exception cref="T:System.ArgumentNullException">format or args is null</exception>
        </member>
        <member name="M:MicroServer.Utilities.StringUtility.Format(System.String,System.Object[])">
            <summary>
            Format the given string using the provided collection of objects.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>A copy of format in which the format items have been replaced by the string representation of the corresponding objects in args.</returns>
            <exception cref="T:MicroServer.Utilities.FormatException">format is invalid, or the index of a format item is less than zero, or greater than or equal to the length of the args array.</exception>
            <exception cref="T:System.ArgumentNullException">format or args is null</exception>
            <example>
            x = StringUtility.Format("Quick brown {0}","fox");
            </example>
        </member>
        <member name="T:MicroServer.Utilities.FormatException">
            <summary>
            The exception that is thrown when the format of an argument does not meet the parameter specifications of the invoked method.
            </summary>
        </member>
        <member name="M:MicroServer.Utilities.FormatException.#ctor">
            <summary>
            Initializes a new instance of the FormatException class.
            </summary>
        </member>
        <member name="M:MicroServer.Utilities.FormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FormatException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:MicroServer.Utilities.FormatException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the FormatException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="ex">The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
        </member>
    </members>
</doc>
